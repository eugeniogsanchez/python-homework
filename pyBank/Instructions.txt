
https://utoronto.bootcampcontent.com/utoronto-bootcamp/UTOR-VIRT-FIN-PT-02-2022-U-LOL/-/tree/main/Homeworks/02-Python/Instructions


https://github.com/eugeniogsanchez/python-homework

===================================================================================================

Unit 2 | Homework Assignment: Automate Your Day Job with Python

Background
You've made it! It's time to put away the Excel sheet and join the big leagues. Welcome to the world of programming with Python. In this homework assignment, you'll be using the concepts you've learned to complete the required PyBank Python activity, and if you wish to stretch your skills even further, the optional PyRamen Python activity. Both activities present a real-world situation in which your newfound Python skills will come in handy. These activities are far from easy, though, so expect some hard work ahead!

Before You Begin


Create a new GitHub repo called python-homework. Then, clone it to your computer.


In your local git repository, create a directory for both of the Python activities. Use folder names that correspond to the activities: PyBank and PyRamen.


In each folder you just created, add a new file called main.ipynb. Remember that to create this file you will need to use JupyterLab to correctly generate the .ipynb file format. This will be the main notebook to run for each analysis.


Push the above changes to GitHub.





# Initialize variable to hold salaries
salaries = []

# Initialize line_num variable
line_num = 0

# Open the input path as a file object
with open(csvpath, 'r') as csvfile:

    # Print the datatype of the file object
    print(type(csvfile))

    # Pass in the csv file to the csv.reader() function
    # (with ',' as the delmiter/separator) and return the csvreader object
    csvreader = csv.reader(csvfile, delimiter=',')
    # Print the datatype of the csvreader
    print(type(csvreader))

    # Go to the next row from the start of the file
    # (which is often the first row/header) and iterate line_num by 1
    header = next(csvreader)
    line_num += 1
    # Print the header
    print(f"{header} <---- HEADER")

    # Read each row of data after the header
    for row in csvreader:
        # Print the row
        print(row)
        # Set salary variable equal to the value in the 4th column of each row
        salary = int(row[3])
        # Append the row salary value to the list of salaries
        salaries.append(salary)

# Initialize metric variables
max_salary = 0
min_salary = 0
avg_salary = 0
total_salary = 0
count_salary = 0





===================================================================================



# Calculate the max, mean, and average of the list of salaries
for salary in salaries:

    # Sum the total and count variables
    total_salary += salary
    count_salary += 1

    # Logic to determine min and max salaries
    if min_salary == 0:
        min_salary = salary
    elif salary > max_salary:
        max_salary = salary
    elif salary < min_salary:
        min_salary = salary

# Calculate the average salary, round to the nearest 2 decimal places
avg_salary = round(total_salary / count_salary, 2)

# Print the metrics
print(max_salary, min_salary, avg_salary)





=================================




# Set the output header
header = ["Max_Salary", "Min_Salary", "Avg_Salary"]
# Create a list of metrics
metrics = [max_salary, min_salary, avg_salary]

# Set the output file path
output_path = Path('output.csv')

# Open the output path as a file object
with open(output_path, 'w') as csvfile:
    # Set the file object as a csvwriter object
    csvwriter = csv.writer(csvfile, delimiter=',')
    # Write the header to the output file
    csvwriter.writerow(header)
    # Write the list of metrics to the output file
    csvwriter.writerow(metrics)



==============================================



# Import from the pathlib library, the main class Path
from pathlib import Path

# Check the current directory where the Python program is executing from
print(f"Current Working Directory: {Path.cwd()}")

# Set the path normally (Windows)
# Set string raw literal due to backslashes acting as escape characters for
# the Windows file = r'..\Resources\input.txt'

# Set the path normally (Unix)
#file = '../Resources/input.txt'

# Set the input file path irregardless of OS
filepath = Path("../Resources/input.txt")

# Open the file in "read" mode ('r') and store the
# contents in the variable "text"
with open(filepath, 'r') as file:
    # Store all of the text from the file inside a variable called "text"
    # and print the contexts of the text file
    text = file.read()
    print(text)

    # Parse and print the file line by line. The print statement adds an
    # extra line break to each line in the output.
    line_num = 1
    for line in file:
        print(f"line {line_num}: {line}")
        line_num += 1

# Set the output file path
output_path = Path("output.txt")

# Open the output_path as a file object in "write" mode ('w')
# Write a header line and write the contents of 'text' to the file
with open(output_path, 'w') as file:
    file.write("This is an output file.\n")
    file.write(text)



